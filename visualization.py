import plotly.graph_objects as go
import plotly.express as px
import networkx as nx
import pandas as pd

# --- Network Visualization Function ---
def visualize_network(sim_state, pos):
    """Generates a Plotly figure for the network state.

    Args:
        sim_state (dict): Dictionary containing 'agents', 'network', 'time_step', 'model_type'.
        pos (dict): Dictionary of node positions generated by networkx layout.

    Returns:
        plotly.graph_objects.Figure: The Plotly figure object, or None if no network.
    """
    agents = sim_state['agents']
    network = sim_state['network']
    time_step = sim_state['time_step']
    model_type = sim_state['model_type']

    if not network or not agents:
        return None

    # 1. Edge Trace
    edge_x = []
    edge_y = []
    if network.number_of_edges() > 0:
        for edge in network.edges():
            x0, y0 = pos[edge[0]]
            x1, y1 = pos[edge[1]]
            edge_x.extend([x0, x1, None])
            edge_y.extend([y0, y1, None])

    edge_trace = go.Scatter(
        x=edge_x, y=edge_y,
        line=dict(width=0.5, color='#888'),
        hoverinfo='none',
        mode='lines')

    # 2. Node Trace
    node_x = []
    node_y = []
    node_text = []
    node_colors = []
    node_symbols = []
    node_ids = list(network.nodes())

    for node_id in node_ids:
        if node_id not in pos: # Check if node has position (might not if isolated)
            continue
        x, y = pos[node_id]
        node_x.append(x)
        node_y.append(y)
        agent = agents[node_id]
        belief_str = f"Belief: {agent.belief_state:.3f}"
        trust_info = ""
        if model_type == 'chamber' and agent.trust_scores:
            avg_trust = sum(agent.trust_scores.values()) / len(agent.trust_scores) if agent.trust_scores else 0
            trust_info = f"<br>Avg Trust Given: {avg_trust:.2f}"

        group = agent.group
        symbol = "circle" if group == 'A' else "square"

        node_text.append(f"Agent ID: {agent.id}<br>Group: {group}<br>{belief_str}{trust_info}")
        node_colors.append(agent.belief_state)
        node_symbols.append(symbol)

    node_trace = go.Scatter(
        x=node_x, y=node_y,
        mode='markers',
        hoverinfo='text',
        marker=dict(
            showscale=True,
            colorscale='RdBu',
            reversescale=False,
            color=node_colors,
            size=10,
            symbol=node_symbols,
            colorbar=dict(
                thickness=15,
                title=dict(text='Belief State', side='right'),
                xanchor='left'
            ),
            line_width=1,
            line_color='#333'
        ),
        text=node_text
    )

    # 3. Create Figure
    fig = go.Figure(data=[edge_trace, node_trace],
                 layout=go.Layout(
                    title=dict(
                        text=f'Network State at Time Step: {time_step} ({model_type.capitalize()})',
                        font=dict(size=16)
                    ),
                    showlegend=False,
                    hovermode='closest',
                    margin=dict(b=20,l=5,r=5,t=40),
                    annotations=[ dict(
                        text="Visualization by Plotly",
                        showarrow=False,
                        xref="paper", yref="paper",
                        x=0.005, y=-0.002 ) ],
                    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False))
                    )
    return fig

# --- Metrics Plotting Function ---
def plot_metrics(metrics_history):
    """Generates a Plotly figure for the simulation metrics history.

    Args:
        metrics_history (list): List of metric dictionaries.

    Returns:
        plotly.graph_objects.Figure: The Plotly figure object, or None if no history.
    """
    if not metrics_history or len(metrics_history) < 1:
        return None

    df = pd.DataFrame(metrics_history)
    df = df.dropna(axis=1, how='all')

    fig = go.Figure()
    colors = px.colors.qualitative.Plotly
    color_A = colors[0]
    color_B = colors[1]

    # Plot Group A Avg (Thick)
    if 'group_A_avg' in df.columns:
        fig.add_trace(go.Scatter(x=df['time_step'], y=df['group_A_avg'], mode='lines+markers',
                                 name='Avg Belief (Grp A)', line=dict(color=color_A, width=3)))

    # Plot Group B Avg (Thick)
    if 'group_B_avg' in df.columns:
        fig.add_trace(go.Scatter(x=df['time_step'], y=df['group_B_avg'], mode='lines+markers',
                                 name='Avg Belief (Grp B)', line=dict(color=color_B, width=3)))

    fig.update_layout(
        title="Group Average Belief Over Time",
        xaxis_title="Time Step",
        yaxis=dict(
            title="Average Belief",
            range=[0, 1]
        ),
        hovermode="x unified",
        legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.01)
    )

    return fig 